package common

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Schema", func() {

	Describe(".MakeAccountKey", func() {
		It("should return expected key", func() {
			k := MakeKeyAccount(10, []byte("chainA"), []byte("some_addr"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x3a, 0x61, 0x63, 0x63,
				0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x2f, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
			}))
		})
	})

	Describe(".QueryAccountKey", func() {
		It("should return expected key", func() {
			k := MakeQueryKeyAccount([]byte("chainA"), []byte("some_addr"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x3a, 0x61, 0x63, 0x63,
				0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
			}))
		})
	})

	Describe(".MakeBlockKey", func() {
		It("should return expected key", func() {
			k := MakeKeyBlock([]byte("chainA"), 10)
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x3a, 0x62, 0x6c, 0x6f,
				0x63, 0x6b, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
			}))
		})
	})

	Describe(".MakeBlocksQueryKey", func() {
		It("should return expected key", func() {
			k := MakeQueryKeyBlocks([]byte("chainA"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x3a, 0x62, 0x6c, 0x6f,
				0x63, 0x6b,
			}))
		})
	})

	Describe(".MakeChainKey", func() {
		It("should return expected key", func() {
			k := MakeKeyChain([]byte("chainA"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41,
			}))
		})
	})

	Describe(".MakeChainsQueryKey", func() {
		It("should return expected key", func() {
			k := MakeQueryKeyChains()
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
			}))
		})
	})

	Describe(".MakeTxKey", func() {
		It("should return expected key", func() {
			k := MakeKeyTransaction([]byte("chainA"), 221, []byte("tx123"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x3a, 0x74, 0x78, 0x3a,
				0x74, 0x78, 0x31, 0x32, 0x33, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd,
			}))
		})
	})

	Describe(".MakeTxQueryKey", func() {
		It("should return expected key", func() {
			k := MakeQueryKeyTransaction([]byte("chainA"), []byte("tx123"))
			Expect(k).To(Equal([]uint8{
				0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x3a, 0x74, 0x78, 0x3a,
				0x74, 0x78, 0x31, 0x32, 0x33,
			}))
		})
	})

	Describe(".MakeTreeKey", func() {
		It("should return expected key", func() {
			k := MakeTreeKey(10, TagAccount)
			Expect(k).To(Equal([]uint8{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
			}))
		})
	})
})
