package blockchain

import (
	"math/big"

	"github.com/ellcrys/elld/util"
	"github.com/ellcrys/elld/wire"
)

var GenesisBlock = &wire.Block{
	Header: &wire.Header{
		Number: 0x0000000000000001,
		Nonce: wire.BlockNonce{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		},
		MixHash: util.Hash{
			0x6d, 0x69, 0x78, 0x20, 0x68, 0x61, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		Timestamp:     1533633271,
		CreatorPubKey: "48d9u6L7tWpSVYmTE4zBDChMUasjP5pvoXE7kPw5HbJnXRnZBNC",
		ParentHash: util.Hash{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		StateRoot: util.Hash{
			0xb7, 0xce, 0xe5, 0x0a, 0x9e, 0x67, 0xd0, 0x25, 0xb8, 0x0b, 0xaf, 0xd9, 0x9f, 0xeb, 0x56, 0x90,
			0x32, 0xc1, 0x86, 0xbb, 0x93, 0xf0, 0x9d, 0x8d, 0x66, 0x3d, 0xcb, 0x23, 0x38, 0x3c, 0x74, 0xee,
		},
		TransactionsRoot: util.Hash{
			0x8f, 0xb2, 0x99, 0x42, 0xd7, 0x52, 0xd4, 0x80, 0x05, 0x47, 0xa5, 0x6c, 0xa0, 0x56, 0x31, 0x54,
			0xc9, 0x0f, 0x73, 0xfa, 0x54, 0x10, 0xbf, 0xd0, 0xf9, 0x1b, 0xc4, 0x81, 0xc3, 0x5d, 0xc6, 0x29,
		},
		Difficulty: new(big.Int).SetInt64(0x1f4),
		Extra:      []uint8{},
	},
	Transactions: []*wire.Transaction{
		&wire.Transaction{
			Type:         2,
			Nonce:        123,
			To:           "eGzzf1HtQL7M9Eh792iGHTvb6fsnnPipad",
			From:         "eGzzf1HtQL7M9Eh792iGHTvb6fsnnPipad",
			SenderPubKey: "48d9u6L7tWpSVYmTE4zBDChMUasjP5pvoXE7kPw5HbJnXRnZBNC",
			Value:        "1",
			Timestamp:    1532730722,
			Fee:          "0.1",
			InvokeArgs:   (*wire.InvokeArgs)(nil),
			Sig: []uint8{
				0x75, 0x41, 0xfe, 0x04, 0x0a, 0x9c, 0xad, 0xfa, 0x0f, 0xfe, 0x50, 0x19, 0x57, 0x34, 0x75, 0x90,
				0xe0, 0xba, 0x78, 0xd4, 0x36, 0x4c, 0xf6, 0xf7, 0x3a, 0x9f, 0x4f, 0x22, 0x14, 0xaf, 0x54, 0x4d,
				0x8d, 0x3e, 0x2f, 0x33, 0xba, 0x48, 0x57, 0x77, 0x47, 0xc3, 0x34, 0xab, 0xae, 0xec, 0x19, 0x80,
				0x3d, 0xcc, 0xa1, 0x0e, 0xf4, 0xd1, 0x3a, 0x15, 0xbe, 0x57, 0xab, 0x8b, 0x69, 0xd1, 0xe8, 0x08,
			},
			Hash: util.Hash{
				0xb5, 0xd3, 0x03, 0x9a, 0x1c, 0x65, 0x4c, 0xf8, 0x67, 0xf2, 0xa3, 0xd3, 0xa0, 0x05, 0x15, 0x52,
				0xd5, 0xff, 0x48, 0x30, 0xcc, 0x1c, 0x83, 0xa3, 0xad, 0xe0, 0x86, 0xe7, 0x25, 0xdd, 0xca, 0xdb,
			},
		},
	},
	Hash: util.Hash{
		0x9d, 0xed, 0x0b, 0xd3, 0x72, 0xe1, 0x95, 0x35, 0xdb, 0x00, 0xd0, 0x60, 0x70, 0x3e, 0xed, 0x06,
		0x69, 0x24, 0x94, 0xf0, 0xaf, 0x14, 0xb7, 0x97, 0x46, 0x58, 0xc7, 0x4a, 0xf5, 0xe0, 0xce, 0x9d,
	},
	Sig: []uint8{
		0x8a, 0xe1, 0x1d, 0x18, 0x9a, 0x25, 0x39, 0xdc, 0x94, 0xb6, 0x47, 0xae, 0xe2, 0x65, 0x63, 0xac,
		0x9b, 0xac, 0xf0, 0x38, 0x4b, 0xb9, 0x6e, 0xdc, 0xf4, 0x42, 0xb1, 0x65, 0x69, 0x12, 0x87, 0x62,
		0xd1, 0xba, 0x53, 0x94, 0x70, 0xa4, 0xf6, 0x60, 0xaf, 0x12, 0x29, 0xc5, 0xe8, 0xbe, 0xc9, 0xe5,
		0x99, 0xf0, 0x4c, 0x2b, 0x32, 0x46, 0xe0, 0xd1, 0xdf, 0x01, 0x6d, 0xfc, 0x1b, 0x86, 0xb5, 0x0c,
	},
}
