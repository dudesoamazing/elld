package blockchain

import (
	"math/big"

	"github.com/ellcrys/elld/util"
	"github.com/ellcrys/elld/wire"
)

var GenesisBlock = &wire.Block{
	Header: &wire.Header{
		Number: 0x0000000000000001,
		Nonce: wire.BlockNonce{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		},
		MixHash: util.Hash{
			0x6d, 0x69, 0x78, 0x20, 0x68, 0x61, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		Timestamp:     1533380605,
		CreatorPubKey: "48d9u6L7tWpSVYmTE4zBDChMUasjP5pvoXE7kPw5HbJnXRnZBNC",
		ParentHash: util.Hash{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		StateRoot: util.Hash{
			0x42, 0x28, 0x55, 0x51, 0x02, 0xa3, 0xe0, 0x42, 0x90, 0x9a, 0xbd, 0x88, 0x58, 0xaf, 0xf3, 0x7d,
			0xb9, 0xeb, 0x13, 0xab, 0x40, 0xed, 0x9b, 0x67, 0xab, 0x30, 0x35, 0x34, 0x3c, 0x7c, 0x79, 0x50,
		},
		TransactionsRoot: util.Hash{
			0x94, 0xe4, 0x6d, 0x40, 0x83, 0xdf, 0x0a, 0x27, 0x66, 0x2a, 0xc0, 0x8f, 0x32, 0x9c, 0xc0, 0x46,
			0x3b, 0x8a, 0x65, 0x42, 0x89, 0xf2, 0xf3, 0xda, 0x12, 0xcd, 0x34, 0x0f, 0x5a, 0x88, 0x17, 0x26,
		},
		Difficulty: new(big.Int).SetInt64(0x1f4),
	},
	Transactions: []*wire.Transaction{
		&wire.Transaction{
			Type:         1,
			Nonce:        123,
			To:           "e6i7rxApBYUt7w94gGDKTz45A5J567JfkS",
			From:         "eGzzf1HtQL7M9Eh792iGHTvb6fsnnPipad",
			SenderPubKey: "48d9u6L7tWpSVYmTE4zBDChMUasjP5pvoXE7kPw5HbJnXRnZBNC",
			Value:        "1",
			Timestamp:    1532730722,
			Fee:          "0.1",
			InvokeArgs:   (*wire.InvokeArgs)(nil),
			Sig: []uint8{
				0x88, 0x0f, 0x9d, 0xe7, 0x01, 0x42, 0x13, 0xca, 0x41, 0x9b, 0x01, 0x53, 0xf3, 0x5a, 0x68, 0x24,
				0x6e, 0xc5, 0x39, 0x64, 0x39, 0x1b, 0xa6, 0x55, 0x2f, 0xb8, 0x17, 0xc7, 0xd9, 0x03, 0x52, 0x1a,
				0x8d, 0xdb, 0xc6, 0xf0, 0xcc, 0x0c, 0xb9, 0x3b, 0x6c, 0x20, 0x31, 0x92, 0xe1, 0xc8, 0xc5, 0xb5,
				0xa8, 0xf8, 0x38, 0xc6, 0xf7, 0xb3, 0xeb, 0x04, 0x42, 0xf8, 0xbf, 0x0e, 0x81, 0xfe, 0x8e, 0x07,
			},
			Hash: util.Hash{
				0x00, 0x7e, 0x3c, 0x2b, 0xea, 0x97, 0x23, 0x45, 0x0d, 0xa8, 0x8c, 0x4f, 0xa1, 0xaa, 0xc5, 0x0c,
				0xb0, 0x27, 0x2f, 0xdc, 0xde, 0x41, 0x9f, 0x69, 0x44, 0x81, 0x98, 0x3f, 0x12, 0x14, 0x13, 0xf4,
			},
		},
	},
	Hash: util.Hash{
		0x49, 0x3e, 0x03, 0x6d, 0xa7, 0xe3, 0x14, 0x88, 0xc7, 0xa2, 0xf7, 0xb9, 0xa1, 0xae, 0x9a, 0xaf,
		0x0b, 0xe5, 0xb8, 0x3f, 0xc9, 0x68, 0x50, 0x25, 0xf6, 0x1f, 0xff, 0xb0, 0x2c, 0x0d, 0x82, 0x45,
	},
	Sig: []uint8{
		0xde, 0xe1, 0x03, 0x9c, 0xb8, 0x4e, 0xbb, 0xc4, 0x33, 0x9d, 0x69, 0x92, 0x04, 0x3e, 0x63, 0x87,
		0x70, 0x57, 0xc1, 0x8e, 0xd4, 0x66, 0x26, 0x81, 0x2c, 0x6a, 0xdf, 0xe8, 0xf9, 0x46, 0xef, 0xa1,
		0x89, 0x40, 0xa8, 0xe5, 0x64, 0xc4, 0x93, 0x63, 0x33, 0xbe, 0x0d, 0x84, 0x4d, 0x77, 0x1c, 0x96,
		0xee, 0x41, 0xfc, 0xbf, 0x8b, 0xd3, 0xaf, 0x72, 0xd1, 0xdc, 0xda, 0x73, 0x01, 0x28, 0x4e, 0x05,
	},
}
