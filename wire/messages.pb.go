// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wire/messages.proto

/*
Package wire is a generated protocol buffer package.

It is generated from these files:
	wire/messages.proto

It has these top-level messages:
	Handshake
	GetAddr
	Addr
	Address
	Ping
	Pong
	Reject
	InvokeArgs
	Transaction
	Block
*/
package wire

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Handshake represents the first message between peers
type Handshake struct {
	SubVersion string `protobuf:"bytes,1,opt,name=subVersion,proto3" json:"subVersion,omitempty"`
}

func (m *Handshake) Reset()                    { *m = Handshake{} }
func (*Handshake) ProtoMessage()               {}
func (*Handshake) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{0} }

func (m *Handshake) GetSubVersion() string {
	if m != nil {
		return m.SubVersion
	}
	return ""
}

// GetAddr is used to request for addresses from other peers
type GetAddr struct {
}

func (m *GetAddr) Reset()                    { *m = GetAddr{} }
func (*GetAddr) ProtoMessage()               {}
func (*GetAddr) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{1} }

// GetAddrResponse is used to send addresses in response to a GetAddr
type Addr struct {
	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *Addr) Reset()                    { *m = Addr{} }
func (*Addr) ProtoMessage()               {}
func (*Addr) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{2} }

func (m *Addr) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Address struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{3} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Ping represents a ping message
type Ping struct {
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{4} }

// Pong represents a pong message
type Pong struct {
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{5} }

// Reject is used to inform a node that its message was rejected
type Reject struct {
	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code      int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Reason    string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	ExtraData []byte `protobuf:"bytes,4,opt,name=extraData,proto3" json:"extraData,omitempty"`
}

func (m *Reject) Reset()                    { *m = Reject{} }
func (*Reject) ProtoMessage()               {}
func (*Reject) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{6} }

func (m *Reject) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Reject) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Reject) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Reject) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

// InvokeArgs describes a function to be executed by a blockode
type InvokeArgs struct {
	Func   string                 `protobuf:"bytes,1,opt,name=func,proto3" json:"func,omitempty"`
	Params map[string]interface{} `protobuf:"bytes,2,rep,name=params,castvalue=interface{}" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InvokeArgs) Reset()                    { *m = InvokeArgs{} }
func (*InvokeArgs) ProtoMessage()               {}
func (*InvokeArgs) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{7} }

func (m *InvokeArgs) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *InvokeArgs) GetParams() map[string]interface{} {
	if m != nil {
		return m.Params
	}
	return nil
}

// Transaction represents a transaction
type Transaction struct {
	Type         int64       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Nonce        int64       `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To           string      `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	SenderPubKey string      `protobuf:"bytes,4,opt,name=senderPubKey,proto3" json:"senderPubKey,omitempty"`
	Value        string      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp    int64       `protobuf:"varint,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Fee          string      `protobuf:"bytes,7,opt,name=Fee,proto3" json:"Fee,omitempty"`
	InvokeArgs   *InvokeArgs `protobuf:"bytes,8,opt,name=InvokeArgs" json:"InvokeArgs,omitempty"`
	Sig          []byte      `protobuf:"bytes,9,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{8} }

func (m *Transaction) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Transaction) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetSenderPubKey() string {
	if m != nil {
		return m.SenderPubKey
	}
	return ""
}

func (m *Transaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *Transaction) GetInvokeArgs() *InvokeArgs {
	if m != nil {
		return m.InvokeArgs
	}
	return nil
}

func (m *Transaction) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type Block struct {
	Version        string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	HashPrevBlock  string   `protobuf:"bytes,2,opt,name=hashPrevBlock,proto3" json:"hashPrevBlock,omitempty"`
	TX             []string `protobuf:"bytes,3,rep,name=tX" json:"tX,omitempty"`
	HashMerkleRoot string   `protobuf:"bytes,4,opt,name=hashMerkleRoot,proto3" json:"hashMerkleRoot,omitempty"`
	Time           string   `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Nounce         uint64   `protobuf:"varint,6,opt,name=nounce,proto3" json:"nounce,omitempty"`
	Difficulty     string   `protobuf:"bytes,7,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Number         uint64   `protobuf:"varint,8,opt,name=number,proto3" json:"number,omitempty"`
	PowHash        string   `protobuf:"bytes,9,opt,name=powHash,proto3" json:"powHash,omitempty"`
	PowResult      string   `protobuf:"bytes,10,opt,name=powResult,proto3" json:"powResult,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorMessages, []int{9} }

func (m *Block) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Block) GetHashPrevBlock() string {
	if m != nil {
		return m.HashPrevBlock
	}
	return ""
}

func (m *Block) GetTX() []string {
	if m != nil {
		return m.TX
	}
	return nil
}

func (m *Block) GetHashMerkleRoot() string {
	if m != nil {
		return m.HashMerkleRoot
	}
	return ""
}

func (m *Block) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Block) GetNounce() uint64 {
	if m != nil {
		return m.Nounce
	}
	return 0
}

func (m *Block) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

func (m *Block) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetPowHash() string {
	if m != nil {
		return m.PowHash
	}
	return ""
}

func (m *Block) GetPowResult() string {
	if m != nil {
		return m.PowResult
	}
	return ""
}

func init() {
	proto.RegisterType((*Handshake)(nil), "wire.Handshake")
	proto.RegisterType((*GetAddr)(nil), "wire.GetAddr")
	proto.RegisterType((*Addr)(nil), "wire.Addr")
	proto.RegisterType((*Address)(nil), "wire.Address")
	proto.RegisterType((*Ping)(nil), "wire.Ping")
	proto.RegisterType((*Pong)(nil), "wire.Pong")
	proto.RegisterType((*Reject)(nil), "wire.Reject")
	proto.RegisterType((*InvokeArgs)(nil), "wire.InvokeArgs")
	proto.RegisterType((*Transaction)(nil), "wire.Transaction")
	proto.RegisterType((*Block)(nil), "wire.Block")
}
func (this *Handshake) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&wire.Handshake{")
	s = append(s, "SubVersion: "+fmt.Sprintf("%#v", this.SubVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAddr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&wire.GetAddr{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Addr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&wire.Addr{")
	if this.Addresses != nil {
		s = append(s, "Addresses: "+fmt.Sprintf("%#v", this.Addresses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wire.Address{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&wire.Ping{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&wire.Pong{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Reject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&wire.Reject{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "ExtraData: "+fmt.Sprintf("%#v", this.ExtraData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvokeArgs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&wire.InvokeArgs{")
	s = append(s, "Func: "+fmt.Sprintf("%#v", this.Func)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]interface{}{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Transaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&wire.Transaction{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "SenderPubKey: "+fmt.Sprintf("%#v", this.SenderPubKey)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	if this.InvokeArgs != nil {
		s = append(s, "InvokeArgs: "+fmt.Sprintf("%#v", this.InvokeArgs)+",\n")
	}
	s = append(s, "Sig: "+fmt.Sprintf("%#v", this.Sig)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&wire.Block{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "HashPrevBlock: "+fmt.Sprintf("%#v", this.HashPrevBlock)+",\n")
	s = append(s, "TX: "+fmt.Sprintf("%#v", this.TX)+",\n")
	s = append(s, "HashMerkleRoot: "+fmt.Sprintf("%#v", this.HashMerkleRoot)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Nounce: "+fmt.Sprintf("%#v", this.Nounce)+",\n")
	s = append(s, "Difficulty: "+fmt.Sprintf("%#v", this.Difficulty)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "PowHash: "+fmt.Sprintf("%#v", this.PowHash)+",\n")
	s = append(s, "PowResult: "+fmt.Sprintf("%#v", this.PowResult)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (this *Handshake) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Handshake{`,
		`SubVersion:` + fmt.Sprintf("%v", this.SubVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAddr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAddr{`,
		`}`,
	}, "")
	return s
}
func (this *Addr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Addr{`,
		`Addresses:` + strings.Replace(fmt.Sprintf("%v", this.Addresses), "Address", "Address", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Address{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ping{`,
		`}`,
	}, "")
	return s
}
func (this *Pong) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pong{`,
		`}`,
	}, "")
	return s
}
func (this *Reject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Reject{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`ExtraData:` + fmt.Sprintf("%v", this.ExtraData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvokeArgs) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]interface{}{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&InvokeArgs{`,
		`Func:` + fmt.Sprintf("%v", this.Func) + `,`,
		`Params:` + mapStringForParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *Transaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transaction{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`SenderPubKey:` + fmt.Sprintf("%v", this.SenderPubKey) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`InvokeArgs:` + strings.Replace(fmt.Sprintf("%v", this.InvokeArgs), "InvokeArgs", "InvokeArgs", 1) + `,`,
		`Sig:` + fmt.Sprintf("%v", this.Sig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Block) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Block{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`HashPrevBlock:` + fmt.Sprintf("%v", this.HashPrevBlock) + `,`,
		`TX:` + fmt.Sprintf("%v", this.TX) + `,`,
		`HashMerkleRoot:` + fmt.Sprintf("%v", this.HashMerkleRoot) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Nounce:` + fmt.Sprintf("%v", this.Nounce) + `,`,
		`Difficulty:` + fmt.Sprintf("%v", this.Difficulty) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`PowHash:` + fmt.Sprintf("%v", this.PowHash) + `,`,
		`PowResult:` + fmt.Sprintf("%v", this.PowResult) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("wire/messages.proto", fileDescriptorMessages) }

var fileDescriptorMessages = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x94, 0xbf, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xef, 0x72, 0xf9, 0xc1, 0x39, 0x6d, 0xa9, 0x0c, 0x42, 0xa7, 0xaa, 0x3a, 0xa2, 0x13,
	0x42, 0x91, 0x0a, 0x29, 0x6a, 0x17, 0x60, 0x4b, 0x45, 0x4b, 0x11, 0x42, 0x8a, 0xac, 0x0a, 0x75,
	0x75, 0xee, 0x5e, 0x2e, 0x47, 0x12, 0x3b, 0xb2, 0x7d, 0x29, 0x11, 0x42, 0x62, 0x66, 0x62, 0x67,
	0x63, 0xe2, 0x4f, 0x61, 0xec, 0xc8, 0x06, 0x3d, 0x16, 0xc6, 0x2e, 0xec, 0xc8, 0x3e, 0xa7, 0x49,
	0x3b, 0xdd, 0xfb, 0x7e, 0x9f, 0x9f, 0x9f, 0xdf, 0xc7, 0x4e, 0xd0, 0x9d, 0xb3, 0x4c, 0xc0, 0xee,
	0x04, 0xa4, 0xa4, 0x29, 0xc8, 0xce, 0x54, 0x70, 0xc5, 0x71, 0x55, 0x9b, 0x5b, 0x8f, 0xd3, 0x4c,
	0x0d, 0xf3, 0x7e, 0x27, 0xe6, 0x93, 0xdd, 0x94, 0xa7, 0x7c, 0xd7, 0x24, 0xfb, 0xf9, 0xc0, 0x28,
	0x23, 0x4c, 0x54, 0x16, 0x45, 0x3b, 0xc8, 0x3f, 0xa6, 0x2c, 0x91, 0x43, 0x3a, 0x02, 0x1c, 0x22,
	0x24, 0xf3, 0xfe, 0x5b, 0x10, 0x32, 0xe3, 0x2c, 0x70, 0x5b, 0x6e, 0xdb, 0x27, 0x2b, 0x4e, 0xe4,
	0xa3, 0xc6, 0x4b, 0x50, 0xdd, 0x24, 0x11, 0xd1, 0x3e, 0xaa, 0xea, 0x2f, 0xde, 0x41, 0x3e, 0x4d,
	0x12, 0x01, 0x52, 0x82, 0x0c, 0xdc, 0x96, 0xd7, 0x6e, 0xee, 0xad, 0x77, 0xf4, 0x41, 0x3a, 0xdd,
	0xd2, 0x26, 0xcb, 0x7c, 0xd4, 0x45, 0x0d, 0xeb, 0xe2, 0x00, 0x35, 0xac, 0x6f, 0xfb, 0x2c, 0x24,
	0xde, 0x46, 0xbe, 0xca, 0x26, 0x20, 0x15, 0x9d, 0x4c, 0x83, 0x4a, 0xcb, 0x6d, 0x7b, 0x64, 0x69,
	0x44, 0x75, 0x54, 0xed, 0x65, 0x2c, 0x35, 0x5f, 0xce, 0xd2, 0x68, 0x8c, 0xea, 0x04, 0xde, 0x41,
	0xac, 0xf4, 0x8e, 0x16, 0xc8, 0x62, 0x47, 0x2b, 0x31, 0x46, 0xd5, 0x98, 0x27, 0x60, 0x36, 0xab,
	0x11, 0x13, 0xe3, 0x7b, 0xa8, 0x2e, 0x80, 0x4a, 0xce, 0x02, 0xcf, 0x2c, 0xb6, 0x4a, 0x77, 0x87,
	0xf7, 0x4a, 0xd0, 0x17, 0x54, 0xd1, 0xa0, 0xda, 0x72, 0xdb, 0x6b, 0x64, 0x69, 0x44, 0xdf, 0x5c,
	0x84, 0x5e, 0xb1, 0x19, 0x1f, 0x41, 0x57, 0xa4, 0x52, 0x6f, 0x3c, 0xc8, 0x59, 0x6c, 0xfb, 0x99,
	0x18, 0x1f, 0xa2, 0xfa, 0x94, 0x0a, 0x3a, 0x91, 0x41, 0xc5, 0xd0, 0xd8, 0x2e, 0x69, 0x2c, 0xab,
	0x3a, 0x3d, 0x93, 0x3e, 0x64, 0x4a, 0xcc, 0x0f, 0x6e, 0x7f, 0xfe, 0x75, 0xbf, 0x99, 0x31, 0x05,
	0x62, 0x40, 0x63, 0xf8, 0xf0, 0x91, 0xd8, 0xe2, 0xad, 0x67, 0xa8, 0xb9, 0xb2, 0x0e, 0x6f, 0x22,
	0x6f, 0x04, 0x73, 0xdb, 0x48, 0x87, 0xf8, 0x2e, 0xaa, 0xcd, 0xe8, 0x38, 0x2f, 0xa7, 0x5a, 0x23,
	0xa5, 0x78, 0x5e, 0x79, 0xea, 0x46, 0xff, 0x5c, 0xd4, 0x3c, 0x11, 0x94, 0x49, 0x1a, 0xab, 0x8c,
	0x33, 0x7d, 0x4a, 0x35, 0x9f, 0x96, 0x54, 0x3c, 0x62, 0x62, 0x5d, 0xcd, 0x38, 0x8b, 0xc1, 0x02,
	0x2e, 0x05, 0xde, 0x40, 0x15, 0xc5, 0x2d, 0x90, 0x8a, 0xe2, 0x38, 0x42, 0x6b, 0x12, 0x58, 0x02,
	0xa2, 0x97, 0xf7, 0x5f, 0xc3, 0xdc, 0xf0, 0xf0, 0xc9, 0x35, 0x6f, 0x79, 0x8e, 0x9a, 0x49, 0x96,
	0x42, 0x63, 0x3c, 0xb9, 0xba, 0xc4, 0x7a, 0x79, 0x89, 0x57, 0x86, 0x9e, 0xe6, 0x08, 0x20, 0x68,
	0x94, 0xd3, 0x1c, 0x01, 0xe0, 0x27, 0xab, 0x5c, 0x83, 0x5b, 0x2d, 0xb7, 0xdd, 0xdc, 0xdb, 0xbc,
	0x49, 0x8e, 0xac, 0xb2, 0xdf, 0x44, 0x9e, 0xcc, 0xd2, 0xc0, 0x37, 0xd3, 0xeb, 0x30, 0xfa, 0x5a,
	0x41, 0xb5, 0x83, 0x31, 0x8f, 0x47, 0xfa, 0x29, 0xcc, 0xae, 0x3d, 0xe2, 0x85, 0xc4, 0x0f, 0xd0,
	0xfa, 0x90, 0xca, 0x61, 0x4f, 0xc0, 0xcc, 0x2c, 0x35, 0xf3, 0xfb, 0xe4, 0xba, 0x69, 0x38, 0x9c,
	0x06, 0x5e, 0xcb, 0x33, 0x1c, 0x4e, 0xf1, 0x43, 0xb4, 0xa1, 0x17, 0xbc, 0x01, 0x31, 0x1a, 0x03,
	0xe1, 0x5c, 0x59, 0x12, 0x37, 0x5c, 0x43, 0x3a, 0x9b, 0x2c, 0x50, 0x98, 0x58, 0x3f, 0x34, 0xc6,
	0x73, 0x8d, 0x5a, 0x63, 0xa8, 0x12, 0xab, 0xf4, 0x6f, 0x2d, 0xc9, 0x06, 0x83, 0x2c, 0xce, 0xc7,
	0x6a, 0x6e, 0x51, 0xac, 0x38, 0xa6, 0x2e, 0x9f, 0xf4, 0x41, 0x18, 0x1a, 0xba, 0xce, 0x28, 0x3d,
	0xdb, 0x94, 0x9f, 0x1d, 0x53, 0x39, 0x34, 0xb3, 0xfb, 0x64, 0x21, 0x35, 0xf3, 0x29, 0x3f, 0x23,
	0x20, 0xf3, 0xb1, 0x0a, 0x90, 0xc9, 0x2d, 0x8d, 0x83, 0x47, 0xe7, 0x17, 0xa1, 0xf3, 0xf3, 0x22,
	0x74, 0x2e, 0x2f, 0x42, 0xf7, 0x53, 0x11, 0xba, 0xdf, 0x8b, 0xd0, 0xf9, 0x51, 0x84, 0xce, 0x79,
	0x11, 0x3a, 0xbf, 0x8b, 0xd0, 0xf9, 0x5b, 0x84, 0xce, 0x65, 0x11, 0xba, 0x5f, 0xfe, 0x84, 0x4e,
	0xbf, 0x6e, 0xfe, 0x1d, 0xf6, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x47, 0x27, 0xa1, 0x98, 0x69,
	0x04, 0x00, 0x00,
}
