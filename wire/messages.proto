syntax = "proto3";

package wire;

// Handshake represents the first message between peers
message Handshake {
    string subVersion = 1;  // version of the client
}

// HandshakeResponse is a response to Handshake message
message HandshakeResponse {
    repeated string addresses = 1;      // list of addresses
    bytes sig = 2;                      // message signature
}


//Contract rpc Service
service ContractService {
    rpc ContractInvoke(ContractInvokeRequest) returns (ContractInvokeResponse) {};
}

//ContractInvokeRequest represents a request to invoke a smart contract
message ContractInvokeRequest {
    string function = 1;    // smart contract function
    string contractID = 2; // contract id
    bytes data = 3;         // payload
}

//ContractInvokeResponse is a response to the ContractService message
message ContractInvokeResponse {
    string status = 1;  // status of the request
    bytes data = 2;     // payload

}

// GetAddr is used to request for addresses from other peers
message GetAddr {
}

// GetAddrResponse is used to send addresses in response to a GetAddr
message Addr {
    repeated Address addresses = 1;  // list of addresses
}

message Address {
    string address = 1;
    int64 timestamp = 2;
}

// Ping represents a ping message
message Ping {
}

// Pong represents a pong message
message Pong {
}

// Reject is used to inform a node that its message was rejected
message Reject {
    string message = 1;
    int32 code = 2;
    string reason = 3;
    bytes extraData = 4;
}